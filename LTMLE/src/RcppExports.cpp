// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// eval_basis
int eval_basis(NumericVector x, const List& basis);
RcppExport SEXP _LTMLE_eval_basis(SEXP xSEXP, SEXP basisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< const List& >::type basis(basisSEXP);
    rcpp_result_gen = Rcpp::wrap(eval_basis(x, basis));
    return rcpp_result_gen;
END_RCPP
}
// integrate
double integrate(NumericVector val, List& basis, double lower, double upper);
RcppExport SEXP _LTMLE_integrate(SEXP valSEXP, SEXP basisSEXP, SEXP lowerSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type val(valSEXP);
    Rcpp::traits::input_parameter< List& >::type basis(basisSEXP);
    Rcpp::traits::input_parameter< double >::type lower(lowerSEXP);
    Rcpp::traits::input_parameter< double >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(integrate(val, basis, lower, upper));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_LTMLE_eval_basis", (DL_FUNC) &_LTMLE_eval_basis, 2},
    {"_LTMLE_integrate", (DL_FUNC) &_LTMLE_integrate, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_LTMLE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
